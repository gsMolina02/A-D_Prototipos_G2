const twilio = require('twilio');

// Configuraci√≥n del cliente de Twilio
const createTwilioClient = () => {
  const whatsappProvider = process.env.WHATSAPP_PROVIDER || 'twilio';
  
  switch (whatsappProvider.toLowerCase()) {
    case 'twilio':
      return twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
      
    case 'test':
      // Modo de prueba - funcionamiento silencioso
      return {
        messages: {
          create: async (options) => {
            return {
              sid: 'test-' + Date.now(),
              status: 'enviado simulado'
            };
          }
        }
      };
      
    default:
      throw new Error(`Proveedor de WhatsApp no soportado: ${whatsappProvider}`);
  }
};

// Plantillas de mensajes de WhatsApp
const plantillas = {
  confirmacion: (datos) => `
üè• *Sistema de Citas M√©dicas*

‚úÖ *CITA CONFIRMADA*

Estimado/a ${datos.pacienteNombre},

Su cita ha sido agendada exitosamente:

üìÖ *Fecha:* ${datos.fecha}
‚è∞ *Horario:* ${datos.horario}
üë®‚Äç‚öïÔ∏è *Doctor:* ${datos.doctorNombre}
ü©∫ *Especialidad:* ${datos.especialidad || 'Consulta General'}

Por favor, llegue 15 minutos antes de su cita.

¬°Esperamos verle pronto! üôÇ
  `.trim(),

  cancelacion: (datos) => `
üè• *Sistema de Citas M√©dicas*

‚ùå *CITA CANCELADA*

Estimado/a ${datos.pacienteNombre},

Su cita ha sido cancelada:

üìÖ *Fecha:* ${datos.fecha}
‚è∞ *Horario:* ${datos.horario}
üë®‚Äç‚öïÔ∏è *Doctor:* ${datos.doctorNombre}
üìù *Motivo:* ${datos.motivo}

Para reagendar, puede contactarnos o usar nuestro sistema.

Disculpe las molestias.
  `.trim(),

  reprogramacion: (datos) => `
üè• *Sistema de Citas M√©dicas*

üîÑ *CITA REPROGRAMADA*

Estimado/a ${datos.pacienteNombre},

Su cita ha sido reprogramada:

üìÖ *Nueva fecha:* ${datos.nuevaFecha}
‚è∞ *Nuevo horario:* ${datos.nuevoHorario}
üë®‚Äç‚öïÔ∏è *Doctor:* ${datos.doctorNombre}
üìù *Motivo:* ${datos.motivo}

Por favor, anote la nueva fecha y horario.

¬°Esperamos verle pronto! üôÇ
  `.trim(),

  recordatorio: (datos) => `
üè• *Sistema de Citas M√©dicas*

‚è∞ *RECORDATORIO DE CITA*

Estimado/a ${datos.pacienteNombre},

Le recordamos su cita para ma√±ana:

üìÖ *Fecha:* ${datos.fecha}
‚è∞ *Horario:* ${datos.horario}
üë®‚Äç‚öïÔ∏è *Doctor:* ${datos.doctorNombre}

Por favor, llegue 15 minutos antes.

¬°Le esperamos! üôÇ
  `.trim()
};

// Funciones principales del servicio
const whatsappService = {
  // Notificar confirmaci√≥n de cita
  notificarCitaConfirmada: async (telefono, datos) => {
    try {
      const client = createTwilioClient();
      const mensaje = plantillas.confirmacion(datos);
      
      const result = await client.messages.create({
        from: process.env.TWILIO_WHATSAPP_FROM,
        to: `whatsapp:${telefono}`,
        body: mensaje
      });

      return { success: true, messageId: result.sid };
    } catch (error) {
      return { success: false, error: error.message };
    }
  },

  // Notificar cancelaci√≥n de cita
  notificarCitaCancelada: async (telefono, datos) => {
    try {
      const client = createTwilioClient();
      const mensaje = plantillas.cancelacion(datos);
      
      const result = await client.messages.create({
        from: process.env.TWILIO_WHATSAPP_FROM,
        to: `whatsapp:${telefono}`,
        body: mensaje
      });

      return { success: true, messageId: result.sid };
    } catch (error) {
      return { success: false, error: error.message };
    }
  },

  // Notificar reprogramaci√≥n de cita
  notificarCitaReprogramada: async (telefono, datos) => {
    try {
      const client = createTwilioClient();
      const mensaje = plantillas.reprogramacion(datos);
      
      const result = await client.messages.create({
        from: process.env.TWILIO_WHATSAPP_FROM,
        to: `whatsapp:${telefono}`,
        body: mensaje
      });

      return { success: true, messageId: result.sid };
    } catch (error) {
      return { success: false, error: error.message };
    }
  },

  // Enviar recordatorio de cita
  enviarRecordatorio: async (telefono, datos) => {
    try {
      const client = createTwilioClient();
      const mensaje = plantillas.recordatorio(datos);
      
      const result = await client.messages.create({
        from: process.env.TWILIO_WHATSAPP_FROM,
        to: `whatsapp:${telefono}`,
        body: mensaje
      });

      return { success: true, messageId: result.sid };
    } catch (error) {
      return { success: false, error: error.message };
    }
  },

  // Enviar mensaje personalizado
  enviarMensajePersonalizado: async (telefono, mensaje) => {
    try {
      const client = createTwilioClient();
      
      const mensajeCompleto = `
üè• *Sistema de Citas M√©dicas*

${mensaje}

---
Mensaje enviado desde el Sistema de Citas M√©dicas
      `.trim();
      
      const result = await client.messages.create({
        from: process.env.TWILIO_WHATSAPP_FROM,
        to: `whatsapp:${telefono}`,
        body: mensajeCompleto
      });

      return { success: true, messageId: result.sid };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }
};

module.exports = whatsappService;
